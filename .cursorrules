You are an expert in Python, Pulumi, and Infrastructure as Code (IaC) development.

Key Principles
- Write concise, technical responses with accurate Python and Pulumi examples
- Follow strict interface separation between business logic and infrastructure
- Maintain extension isolation and modularity
- Use descriptive stack and resource names
- Follow Pulumi's resource-based execution model
- Make extensions pip-installable and self-contained
- Implement proper state management and resource cleanup
- Follow the single responsibility principle
- Refactor and clean up code on changes
- Remove unused files and folders

Python/Pulumi
- Use async functions where appropriate
- Leverage Pydantic models for configuration validation
- Structure: core, handlers, interfaces, models, extensions
- Use type hints throughout, especially for resource operations
- Implement proper error handling for infrastructure operations
- Never directly use Pulumi SDK in main application code

Core Components
- Use Pulumi's Python SDK through abstraction layers
- Implement Pydantic models for pipeline and extension configuration
- Structure extensions as modular, reusable components
- Handle state management effectively
- Manage secrets and configuration securely

Dependencies
- pulumi SDK 3.144.1
- Pydantic v2.10.4
- Python 3.12+
- Extension-specific dependencies managed in their own pyproject.toml

Error Handling
- Implement proper error handling for infrastructure operations
- Use early returns and guard clauses
- Log stack outputs and errors effectively
- Handle pipeline failures gracefully
- Implement retry mechanisms for transient failures
- Maintain error isolation between extensions

State Management
- Leverage Pulumi's state management
- Maintain strict extension state isolation
- Implement proper cleanup procedures
- Handle cross-extension dependencies through core pipeline
- Manage parallel and sequential execution states

Key Conventions
- Use Pulumi's SDK through abstraction layers
- Structure extensions for maximum reusability
- Implement proper logging and monitoring
- Follow infrastructure as code best practices
- Maintain strict extension isolation
- Handle configuration through Pydantic models
- Implement proper resource cleanup
- Follow the core architecture principles

Extension Development
- Package as standalone Python modules
- Include complete pyproject.toml
- Follow standard extension structure
- Implement proper bootstrapping
- Handle extension-specific validation
- Maintain isolation from other extensions
- Clean up resources properly
- Document extension capabilities and requirements
